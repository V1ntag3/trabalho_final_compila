# Generated from /Users/marcosviniciusribeiroalencar/Documents/Workspace/workspace-universidade/trabalho_final_compila/LPMS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,121,8,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,
        138,8,14,1,15,1,15,5,15,142,8,15,10,15,12,15,145,9,15,1,16,4,16,
        148,8,16,11,16,12,16,149,1,17,4,17,153,8,17,11,17,12,17,154,1,17,
        1,17,4,17,159,8,17,11,17,12,17,160,1,18,1,18,1,18,1,18,5,18,167,
        8,18,10,18,12,18,170,9,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,189,8,24,1,25,
        1,25,1,25,1,25,3,25,195,8,25,1,26,1,26,1,27,1,27,1,27,1,27,5,27,
        203,8,27,10,27,12,27,206,9,27,1,27,1,27,1,28,4,28,211,8,28,11,28,
        12,28,212,1,28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,9,2,
        0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,34,34,
        92,92,3,0,10,10,13,13,34,34,2,0,42,42,47,47,2,0,60,60,62,62,2,0,
        10,10,13,13,3,0,9,10,13,13,32,32,230,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,67,1,0,0,0,5,73,1,0,0,0,7,79,1,
        0,0,0,9,82,1,0,0,0,11,87,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,
        97,1,0,0,0,19,99,1,0,0,0,21,101,1,0,0,0,23,103,1,0,0,0,25,120,1,
        0,0,0,27,122,1,0,0,0,29,137,1,0,0,0,31,139,1,0,0,0,33,147,1,0,0,
        0,35,152,1,0,0,0,37,162,1,0,0,0,39,173,1,0,0,0,41,175,1,0,0,0,43,
        177,1,0,0,0,45,179,1,0,0,0,47,181,1,0,0,0,49,188,1,0,0,0,51,194,
        1,0,0,0,53,196,1,0,0,0,55,198,1,0,0,0,57,210,1,0,0,0,59,60,5,80,
        0,0,60,61,5,114,0,0,61,62,5,111,0,0,62,63,5,103,0,0,63,64,5,114,
        0,0,64,65,5,97,0,0,65,66,5,109,0,0,66,2,1,0,0,0,67,68,5,105,0,0,
        68,69,5,110,0,0,69,70,5,112,0,0,70,71,5,117,0,0,71,72,5,116,0,0,
        72,4,1,0,0,0,73,74,5,112,0,0,74,75,5,114,0,0,75,76,5,105,0,0,76,
        77,5,110,0,0,77,78,5,116,0,0,78,6,1,0,0,0,79,80,5,105,0,0,80,81,
        5,102,0,0,81,8,1,0,0,0,82,83,5,101,0,0,83,84,5,108,0,0,84,85,5,115,
        0,0,85,86,5,101,0,0,86,10,1,0,0,0,87,88,5,119,0,0,88,89,5,104,0,
        0,89,90,5,105,0,0,90,91,5,108,0,0,91,92,5,101,0,0,92,12,1,0,0,0,
        93,94,5,40,0,0,94,14,1,0,0,0,95,96,5,41,0,0,96,16,1,0,0,0,97,98,
        5,123,0,0,98,18,1,0,0,0,99,100,5,125,0,0,100,20,1,0,0,0,101,102,
        5,59,0,0,102,22,1,0,0,0,103,104,5,44,0,0,104,24,1,0,0,0,105,106,
        5,105,0,0,106,107,5,110,0,0,107,121,5,116,0,0,108,109,5,102,0,0,
        109,110,5,108,0,0,110,111,5,111,0,0,111,112,5,97,0,0,112,121,5,116,
        0,0,113,114,5,115,0,0,114,115,5,116,0,0,115,121,5,114,0,0,116,117,
        5,98,0,0,117,118,5,111,0,0,118,119,5,111,0,0,119,121,5,108,0,0,120,
        105,1,0,0,0,120,108,1,0,0,0,120,113,1,0,0,0,120,116,1,0,0,0,121,
        26,1,0,0,0,122,123,5,99,0,0,123,124,5,111,0,0,124,125,5,110,0,0,
        125,126,5,115,0,0,126,127,5,116,0,0,127,28,1,0,0,0,128,129,5,70,
        0,0,129,130,5,97,0,0,130,131,5,108,0,0,131,132,5,115,0,0,132,138,
        5,101,0,0,133,134,5,84,0,0,134,135,5,114,0,0,135,136,5,117,0,0,136,
        138,5,101,0,0,137,128,1,0,0,0,137,133,1,0,0,0,138,30,1,0,0,0,139,
        143,7,0,0,0,140,142,7,1,0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,
        141,1,0,0,0,143,144,1,0,0,0,144,32,1,0,0,0,145,143,1,0,0,0,146,148,
        7,2,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,
        1,0,0,0,150,34,1,0,0,0,151,153,7,2,0,0,152,151,1,0,0,0,153,154,1,
        0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,158,5,
        46,0,0,157,159,7,2,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,
        0,0,0,160,161,1,0,0,0,161,36,1,0,0,0,162,168,5,34,0,0,163,164,5,
        92,0,0,164,167,7,3,0,0,165,167,8,4,0,0,166,163,1,0,0,0,166,165,1,
        0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,
        0,0,0,170,168,1,0,0,0,171,172,5,34,0,0,172,38,1,0,0,0,173,174,5,
        61,0,0,174,40,1,0,0,0,175,176,5,45,0,0,176,42,1,0,0,0,177,178,5,
        37,0,0,178,44,1,0,0,0,179,180,7,5,0,0,180,46,1,0,0,0,181,182,5,43,
        0,0,182,48,1,0,0,0,183,189,7,6,0,0,184,185,5,60,0,0,185,189,5,61,
        0,0,186,187,5,62,0,0,187,189,5,61,0,0,188,183,1,0,0,0,188,184,1,
        0,0,0,188,186,1,0,0,0,189,50,1,0,0,0,190,191,5,61,0,0,191,195,5,
        61,0,0,192,193,5,33,0,0,193,195,5,61,0,0,194,190,1,0,0,0,194,192,
        1,0,0,0,195,52,1,0,0,0,196,197,5,33,0,0,197,54,1,0,0,0,198,199,5,
        47,0,0,199,200,5,47,0,0,200,204,1,0,0,0,201,203,8,7,0,0,202,201,
        1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,207,
        1,0,0,0,206,204,1,0,0,0,207,208,6,27,0,0,208,56,1,0,0,0,209,211,
        7,8,0,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,
        1,0,0,0,213,214,1,0,0,0,214,215,6,28,0,0,215,58,1,0,0,0,13,0,120,
        137,143,149,154,160,166,168,188,194,204,212,1,6,0,0
    ]

class LPMSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM_INIT = 1
    INPUT_FUNCTION = 2
    PRINT_FUNCTION = 3
    IF_CONDICIONAL = 4
    ELSE_CONDICIONAL = 5
    WHILE_CONDICIONAL = 6
    E_PARAN = 7
    D_PARAN = 8
    E_CHAVES = 9
    D_CHAVES = 10
    FIM_DE_LINHA = 11
    VIRGULA = 12
    TYPE = 13
    TYPE_CONST = 14
    BOOLEAN = 15
    ID = 16
    INT = 17
    FLOAT = 18
    STRING = 19
    ATRIBUICAO_OPERADOR = 20
    MINUS_OPERADOR = 21
    MODULO_OPERADOR = 22
    MUL_DIV_OPERADOR = 23
    SOMA_OPERADOR = 24
    RELACIONAL_OPERADOR = 25
    IGUALDADE_OPERADOR = 26
    NEG_OPERADOR = 27
    COMMENT = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Program'", "'input'", "'print'", "'if'", "'else'", "'while'", 
            "'('", "')'", "'{'", "'}'", "';'", "','", "'const'", "'='", 
            "'-'", "'%'", "'+'", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM_INIT", "INPUT_FUNCTION", "PRINT_FUNCTION", "IF_CONDICIONAL", 
            "ELSE_CONDICIONAL", "WHILE_CONDICIONAL", "E_PARAN", "D_PARAN", 
            "E_CHAVES", "D_CHAVES", "FIM_DE_LINHA", "VIRGULA", "TYPE", "TYPE_CONST", 
            "BOOLEAN", "ID", "INT", "FLOAT", "STRING", "ATRIBUICAO_OPERADOR", 
            "MINUS_OPERADOR", "MODULO_OPERADOR", "MUL_DIV_OPERADOR", "SOMA_OPERADOR", 
            "RELACIONAL_OPERADOR", "IGUALDADE_OPERADOR", "NEG_OPERADOR", 
            "COMMENT", "WS" ]

    ruleNames = [ "PROGRAM_INIT", "INPUT_FUNCTION", "PRINT_FUNCTION", "IF_CONDICIONAL", 
                  "ELSE_CONDICIONAL", "WHILE_CONDICIONAL", "E_PARAN", "D_PARAN", 
                  "E_CHAVES", "D_CHAVES", "FIM_DE_LINHA", "VIRGULA", "TYPE", 
                  "TYPE_CONST", "BOOLEAN", "ID", "INT", "FLOAT", "STRING", 
                  "ATRIBUICAO_OPERADOR", "MINUS_OPERADOR", "MODULO_OPERADOR", 
                  "MUL_DIV_OPERADOR", "SOMA_OPERADOR", "RELACIONAL_OPERADOR", 
                  "IGUALDADE_OPERADOR", "NEG_OPERADOR", "COMMENT", "WS" ]

    grammarFileName = "LPMS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


