# Generated from /Users/marcosviniciusribeiroalencar/Documents/Workspace/workspace-universidade/trabalho_final_compila/LPMS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,213,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,124,8,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,135,8,13,1,14,1,
        14,5,14,139,8,14,10,14,12,14,142,9,14,1,15,4,15,145,8,15,11,15,12,
        15,146,1,16,4,16,150,8,16,11,16,12,16,151,1,16,1,16,4,16,156,8,16,
        11,16,12,16,157,1,17,1,17,1,17,1,17,5,17,164,8,17,10,17,12,17,167,
        9,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,3,23,186,8,23,1,24,1,24,1,24,1,24,3,24,
        192,8,24,1,25,1,25,1,26,1,26,1,26,1,26,5,26,200,8,26,10,26,12,26,
        203,9,26,1,26,1,26,1,27,4,27,208,8,27,11,27,12,27,209,1,27,1,27,
        0,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,1,0,9,2,0,65,90,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,2,0,34,34,92,92,3,0,10,10,13,13,34,34,
        2,0,42,42,47,47,2,0,60,60,62,62,2,0,10,10,13,13,3,0,9,10,13,13,32,
        32,228,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,65,1,0,0,
        0,5,71,1,0,0,0,7,77,1,0,0,0,9,80,1,0,0,0,11,85,1,0,0,0,13,91,1,0,
        0,0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,101,
        1,0,0,0,25,123,1,0,0,0,27,134,1,0,0,0,29,136,1,0,0,0,31,144,1,0,
        0,0,33,149,1,0,0,0,35,159,1,0,0,0,37,170,1,0,0,0,39,172,1,0,0,0,
        41,174,1,0,0,0,43,176,1,0,0,0,45,178,1,0,0,0,47,185,1,0,0,0,49,191,
        1,0,0,0,51,193,1,0,0,0,53,195,1,0,0,0,55,207,1,0,0,0,57,58,5,80,
        0,0,58,59,5,114,0,0,59,60,5,111,0,0,60,61,5,103,0,0,61,62,5,114,
        0,0,62,63,5,97,0,0,63,64,5,109,0,0,64,2,1,0,0,0,65,66,5,105,0,0,
        66,67,5,110,0,0,67,68,5,112,0,0,68,69,5,117,0,0,69,70,5,116,0,0,
        70,4,1,0,0,0,71,72,5,112,0,0,72,73,5,114,0,0,73,74,5,105,0,0,74,
        75,5,110,0,0,75,76,5,116,0,0,76,6,1,0,0,0,77,78,5,105,0,0,78,79,
        5,102,0,0,79,8,1,0,0,0,80,81,5,101,0,0,81,82,5,108,0,0,82,83,5,115,
        0,0,83,84,5,101,0,0,84,10,1,0,0,0,85,86,5,119,0,0,86,87,5,104,0,
        0,87,88,5,105,0,0,88,89,5,108,0,0,89,90,5,101,0,0,90,12,1,0,0,0,
        91,92,5,40,0,0,92,14,1,0,0,0,93,94,5,41,0,0,94,16,1,0,0,0,95,96,
        5,123,0,0,96,18,1,0,0,0,97,98,5,125,0,0,98,20,1,0,0,0,99,100,5,59,
        0,0,100,22,1,0,0,0,101,102,5,44,0,0,102,24,1,0,0,0,103,104,5,105,
        0,0,104,105,5,110,0,0,105,124,5,116,0,0,106,107,5,102,0,0,107,108,
        5,108,0,0,108,109,5,111,0,0,109,110,5,97,0,0,110,124,5,116,0,0,111,
        112,5,115,0,0,112,113,5,116,0,0,113,124,5,114,0,0,114,115,5,99,0,
        0,115,116,5,111,0,0,116,117,5,110,0,0,117,118,5,115,0,0,118,124,
        5,116,0,0,119,120,5,98,0,0,120,121,5,111,0,0,121,122,5,111,0,0,122,
        124,5,108,0,0,123,103,1,0,0,0,123,106,1,0,0,0,123,111,1,0,0,0,123,
        114,1,0,0,0,123,119,1,0,0,0,124,26,1,0,0,0,125,126,5,70,0,0,126,
        127,5,97,0,0,127,128,5,108,0,0,128,129,5,115,0,0,129,135,5,101,0,
        0,130,131,5,84,0,0,131,132,5,114,0,0,132,133,5,117,0,0,133,135,5,
        101,0,0,134,125,1,0,0,0,134,130,1,0,0,0,135,28,1,0,0,0,136,140,7,
        0,0,0,137,139,7,1,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,
        0,0,0,140,141,1,0,0,0,141,30,1,0,0,0,142,140,1,0,0,0,143,145,7,2,
        0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,
        0,0,147,32,1,0,0,0,148,150,7,2,0,0,149,148,1,0,0,0,150,151,1,0,0,
        0,151,149,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,155,5,46,0,
        0,154,156,7,2,0,0,155,154,1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,
        0,157,158,1,0,0,0,158,34,1,0,0,0,159,165,5,34,0,0,160,161,5,92,0,
        0,161,164,7,3,0,0,162,164,8,4,0,0,163,160,1,0,0,0,163,162,1,0,0,
        0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,
        0,167,165,1,0,0,0,168,169,5,34,0,0,169,36,1,0,0,0,170,171,5,61,0,
        0,171,38,1,0,0,0,172,173,5,45,0,0,173,40,1,0,0,0,174,175,5,37,0,
        0,175,42,1,0,0,0,176,177,7,5,0,0,177,44,1,0,0,0,178,179,5,43,0,0,
        179,46,1,0,0,0,180,186,7,6,0,0,181,182,5,60,0,0,182,186,5,61,0,0,
        183,184,5,62,0,0,184,186,5,61,0,0,185,180,1,0,0,0,185,181,1,0,0,
        0,185,183,1,0,0,0,186,48,1,0,0,0,187,188,5,61,0,0,188,192,5,61,0,
        0,189,190,5,33,0,0,190,192,5,61,0,0,191,187,1,0,0,0,191,189,1,0,
        0,0,192,50,1,0,0,0,193,194,5,33,0,0,194,52,1,0,0,0,195,196,5,47,
        0,0,196,197,5,47,0,0,197,201,1,0,0,0,198,200,8,7,0,0,199,198,1,0,
        0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,
        0,0,203,201,1,0,0,0,204,205,6,26,0,0,205,54,1,0,0,0,206,208,7,8,
        0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,
        0,0,210,211,1,0,0,0,211,212,6,27,0,0,212,56,1,0,0,0,13,0,123,134,
        140,146,151,157,163,165,185,191,201,209,1,6,0,0
    ]

class LPMSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM_INIT = 1
    INPUT_FUNCTION = 2
    PRINT_FUNCTION = 3
    IF_CONDICIONAL = 4
    ELSE_CONDICIONAL = 5
    WHILE_CONDICIONAL = 6
    E_PARAN = 7
    D_PARAN = 8
    E_CHAVES = 9
    D_CHAVES = 10
    FIM_DE_LINHA = 11
    VIRGULA = 12
    TYPE = 13
    BOOLEAN = 14
    ID = 15
    INT = 16
    FLOAT = 17
    STRING = 18
    ATRIBUICAO_OPERADOR = 19
    MINUS_OPERADOR = 20
    MODULO_OPERADOR = 21
    MUL_DIV_OPERADOR = 22
    SOMA_OPERADOR = 23
    RELACIONAL_OPERADOR = 24
    IGUALDADE_OPERADOR = 25
    NEG_OPERADOR = 26
    COMMENT = 27
    WS = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Program'", "'input'", "'print'", "'if'", "'else'", "'while'", 
            "'('", "')'", "'{'", "'}'", "';'", "','", "'='", "'-'", "'%'", 
            "'+'", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM_INIT", "INPUT_FUNCTION", "PRINT_FUNCTION", "IF_CONDICIONAL", 
            "ELSE_CONDICIONAL", "WHILE_CONDICIONAL", "E_PARAN", "D_PARAN", 
            "E_CHAVES", "D_CHAVES", "FIM_DE_LINHA", "VIRGULA", "TYPE", "BOOLEAN", 
            "ID", "INT", "FLOAT", "STRING", "ATRIBUICAO_OPERADOR", "MINUS_OPERADOR", 
            "MODULO_OPERADOR", "MUL_DIV_OPERADOR", "SOMA_OPERADOR", "RELACIONAL_OPERADOR", 
            "IGUALDADE_OPERADOR", "NEG_OPERADOR", "COMMENT", "WS" ]

    ruleNames = [ "PROGRAM_INIT", "INPUT_FUNCTION", "PRINT_FUNCTION", "IF_CONDICIONAL", 
                  "ELSE_CONDICIONAL", "WHILE_CONDICIONAL", "E_PARAN", "D_PARAN", 
                  "E_CHAVES", "D_CHAVES", "FIM_DE_LINHA", "VIRGULA", "TYPE", 
                  "BOOLEAN", "ID", "INT", "FLOAT", "STRING", "ATRIBUICAO_OPERADOR", 
                  "MINUS_OPERADOR", "MODULO_OPERADOR", "MUL_DIV_OPERADOR", 
                  "SOMA_OPERADOR", "RELACIONAL_OPERADOR", "IGUALDADE_OPERADOR", 
                  "NEG_OPERADOR", "COMMENT", "WS" ]

    grammarFileName = "LPMS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


