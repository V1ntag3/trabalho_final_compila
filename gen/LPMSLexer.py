# Generated from /Users/marcosviniciusribeiroalencar/Documents/Workspace/workspace-universidade/trabalho_final_compila/LPMS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,224,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,129,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,3,15,146,8,15,1,16,1,16,5,16,150,8,
        16,10,16,12,16,153,9,16,1,17,4,17,156,8,17,11,17,12,17,157,1,18,
        4,18,161,8,18,11,18,12,18,162,1,18,1,18,4,18,167,8,18,11,18,12,18,
        168,1,19,1,19,1,19,1,19,5,19,175,8,19,10,19,12,19,178,9,19,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,3,25,197,8,25,1,26,1,26,1,26,1,26,3,26,203,8,26,1,
        27,1,27,1,28,1,28,1,28,1,28,5,28,211,8,28,10,28,12,28,214,9,28,1,
        28,1,28,1,29,4,29,219,8,29,11,29,12,29,220,1,29,1,29,0,0,30,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,1,0,9,2,0,65,90,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,2,0,34,34,92,92,3,0,10,10,13,13,34,34,
        2,0,42,42,47,47,2,0,60,60,62,62,2,0,10,10,13,13,3,0,9,10,13,13,32,
        32,238,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,1,61,1,0,0,0,3,69,1,0,0,0,5,75,1,0,0,0,7,81,1,0,0,0,9,84,1,0,0,
        0,11,89,1,0,0,0,13,95,1,0,0,0,15,101,1,0,0,0,17,103,1,0,0,0,19,105,
        1,0,0,0,21,107,1,0,0,0,23,109,1,0,0,0,25,111,1,0,0,0,27,128,1,0,
        0,0,29,130,1,0,0,0,31,145,1,0,0,0,33,147,1,0,0,0,35,155,1,0,0,0,
        37,160,1,0,0,0,39,170,1,0,0,0,41,181,1,0,0,0,43,183,1,0,0,0,45,185,
        1,0,0,0,47,187,1,0,0,0,49,189,1,0,0,0,51,196,1,0,0,0,53,202,1,0,
        0,0,55,204,1,0,0,0,57,206,1,0,0,0,59,218,1,0,0,0,61,62,5,80,0,0,
        62,63,5,114,0,0,63,64,5,111,0,0,64,65,5,103,0,0,65,66,5,114,0,0,
        66,67,5,97,0,0,67,68,5,109,0,0,68,2,1,0,0,0,69,70,5,105,0,0,70,71,
        5,110,0,0,71,72,5,112,0,0,72,73,5,117,0,0,73,74,5,116,0,0,74,4,1,
        0,0,0,75,76,5,112,0,0,76,77,5,114,0,0,77,78,5,105,0,0,78,79,5,110,
        0,0,79,80,5,116,0,0,80,6,1,0,0,0,81,82,5,105,0,0,82,83,5,102,0,0,
        83,8,1,0,0,0,84,85,5,101,0,0,85,86,5,108,0,0,86,87,5,115,0,0,87,
        88,5,101,0,0,88,10,1,0,0,0,89,90,5,119,0,0,90,91,5,104,0,0,91,92,
        5,105,0,0,92,93,5,108,0,0,93,94,5,101,0,0,94,12,1,0,0,0,95,96,5,
        98,0,0,96,97,5,114,0,0,97,98,5,101,0,0,98,99,5,97,0,0,99,100,5,107,
        0,0,100,14,1,0,0,0,101,102,5,40,0,0,102,16,1,0,0,0,103,104,5,41,
        0,0,104,18,1,0,0,0,105,106,5,123,0,0,106,20,1,0,0,0,107,108,5,125,
        0,0,108,22,1,0,0,0,109,110,5,59,0,0,110,24,1,0,0,0,111,112,5,44,
        0,0,112,26,1,0,0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,129,5,
        116,0,0,116,117,5,102,0,0,117,118,5,108,0,0,118,119,5,111,0,0,119,
        120,5,97,0,0,120,129,5,116,0,0,121,122,5,115,0,0,122,123,5,116,0,
        0,123,129,5,114,0,0,124,125,5,98,0,0,125,126,5,111,0,0,126,127,5,
        111,0,0,127,129,5,108,0,0,128,113,1,0,0,0,128,116,1,0,0,0,128,121,
        1,0,0,0,128,124,1,0,0,0,129,28,1,0,0,0,130,131,5,99,0,0,131,132,
        5,111,0,0,132,133,5,110,0,0,133,134,5,115,0,0,134,135,5,116,0,0,
        135,30,1,0,0,0,136,137,5,70,0,0,137,138,5,97,0,0,138,139,5,108,0,
        0,139,140,5,115,0,0,140,146,5,101,0,0,141,142,5,84,0,0,142,143,5,
        114,0,0,143,144,5,117,0,0,144,146,5,101,0,0,145,136,1,0,0,0,145,
        141,1,0,0,0,146,32,1,0,0,0,147,151,7,0,0,0,148,150,7,1,0,0,149,148,
        1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,34,1,
        0,0,0,153,151,1,0,0,0,154,156,7,2,0,0,155,154,1,0,0,0,156,157,1,
        0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,36,1,0,0,0,159,161,7,2,
        0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,
        0,0,163,164,1,0,0,0,164,166,5,46,0,0,165,167,7,2,0,0,166,165,1,0,
        0,0,167,168,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,38,1,0,0,
        0,170,176,5,34,0,0,171,172,5,92,0,0,172,175,7,3,0,0,173,175,8,4,
        0,0,174,171,1,0,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,
        0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,5,34,
        0,0,180,40,1,0,0,0,181,182,5,61,0,0,182,42,1,0,0,0,183,184,5,45,
        0,0,184,44,1,0,0,0,185,186,5,37,0,0,186,46,1,0,0,0,187,188,7,5,0,
        0,188,48,1,0,0,0,189,190,5,43,0,0,190,50,1,0,0,0,191,197,7,6,0,0,
        192,193,5,60,0,0,193,197,5,61,0,0,194,195,5,62,0,0,195,197,5,61,
        0,0,196,191,1,0,0,0,196,192,1,0,0,0,196,194,1,0,0,0,197,52,1,0,0,
        0,198,199,5,61,0,0,199,203,5,61,0,0,200,201,5,33,0,0,201,203,5,61,
        0,0,202,198,1,0,0,0,202,200,1,0,0,0,203,54,1,0,0,0,204,205,5,33,
        0,0,205,56,1,0,0,0,206,207,5,47,0,0,207,208,5,47,0,0,208,212,1,0,
        0,0,209,211,8,7,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,
        0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,6,28,
        0,0,216,58,1,0,0,0,217,219,7,8,0,0,218,217,1,0,0,0,219,220,1,0,0,
        0,220,218,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,6,29,0,
        0,223,60,1,0,0,0,13,0,128,145,151,157,162,168,174,176,196,202,212,
        220,1,6,0,0
    ]

class LPMSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM_INIT = 1
    INPUT_FUNCTION = 2
    PRINT_FUNCTION = 3
    IF_CONDICIONAL = 4
    ELSE_CONDICIONAL = 5
    WHILE_CONDICIONAL = 6
    BREAK = 7
    E_PARAN = 8
    D_PARAN = 9
    E_CHAVES = 10
    D_CHAVES = 11
    FIM_DE_LINHA = 12
    VIRGULA = 13
    TYPE = 14
    TYPE_CONST = 15
    BOOLEAN = 16
    ID = 17
    INT = 18
    FLOAT = 19
    STRING = 20
    ATRIBUICAO_OPERADOR = 21
    MINUS_OPERADOR = 22
    MODULO_OPERADOR = 23
    MUL_DIV_OPERADOR = 24
    SOMA_OPERADOR = 25
    RELACIONAL_OPERADOR = 26
    IGUALDADE_OPERADOR = 27
    NEG_OPERADOR = 28
    COMMENT = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Program'", "'input'", "'print'", "'if'", "'else'", "'while'", 
            "'break'", "'('", "')'", "'{'", "'}'", "';'", "','", "'const'", 
            "'='", "'-'", "'%'", "'+'", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM_INIT", "INPUT_FUNCTION", "PRINT_FUNCTION", "IF_CONDICIONAL", 
            "ELSE_CONDICIONAL", "WHILE_CONDICIONAL", "BREAK", "E_PARAN", 
            "D_PARAN", "E_CHAVES", "D_CHAVES", "FIM_DE_LINHA", "VIRGULA", 
            "TYPE", "TYPE_CONST", "BOOLEAN", "ID", "INT", "FLOAT", "STRING", 
            "ATRIBUICAO_OPERADOR", "MINUS_OPERADOR", "MODULO_OPERADOR", 
            "MUL_DIV_OPERADOR", "SOMA_OPERADOR", "RELACIONAL_OPERADOR", 
            "IGUALDADE_OPERADOR", "NEG_OPERADOR", "COMMENT", "WS" ]

    ruleNames = [ "PROGRAM_INIT", "INPUT_FUNCTION", "PRINT_FUNCTION", "IF_CONDICIONAL", 
                  "ELSE_CONDICIONAL", "WHILE_CONDICIONAL", "BREAK", "E_PARAN", 
                  "D_PARAN", "E_CHAVES", "D_CHAVES", "FIM_DE_LINHA", "VIRGULA", 
                  "TYPE", "TYPE_CONST", "BOOLEAN", "ID", "INT", "FLOAT", 
                  "STRING", "ATRIBUICAO_OPERADOR", "MINUS_OPERADOR", "MODULO_OPERADOR", 
                  "MUL_DIV_OPERADOR", "SOMA_OPERADOR", "RELACIONAL_OPERADOR", 
                  "IGUALDADE_OPERADOR", "NEG_OPERADOR", "COMMENT", "WS" ]

    grammarFileName = "LPMS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


